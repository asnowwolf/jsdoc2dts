export interface JsDocOptions {
  files?: string | string[];
  source?: string;
  cache?: boolean;
  access?: string;
  configure?: string;
  destination?: string;
  encoding?: string;
  private?: boolean;
  package?: string;
  pedantic?: boolean;
  query?: string;
  recurse?: boolean;
  readme?: string;
  template?: string;
  tutorials?: string;
}

// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface CommentEntry {
  comment?: string;
  meta?: Meta;
  description?: string;
  name?: string;
  longname: string;
  kind: Kind;
  scope?: Scope;
  undocumented?: boolean;
  memberof?: string;
  params?: any[];
  files?: string[];
}

export enum Kind {
  Function = 'function',
  Member = 'member',
  Package = 'package',
}

export interface Meta {
  range: number[];
  filename: string;
  lineno: number;
  columnno: number;
  path: string;
  code: Code;
  vars?: { [key: string]: null | string };
}

export interface Code {
  id: string;
  name: string;
  type?: Type;
  paramnames?: string[];
  value?: boolean | number | null | string;
  funcscope?: string;
}

export enum Type {
  ArrayExpression = 'ArrayExpression',
  AssignmentExpression = 'AssignmentExpression',
  BinaryExpression = 'BinaryExpression',
  CallExpression = 'CallExpression',
  ConditionalExpression = 'ConditionalExpression',
  FunctionDeclaration = 'FunctionDeclaration',
  FunctionExpression = 'FunctionExpression',
  Identifier = 'Identifier',
  Literal = 'Literal',
  LogicalExpression = 'LogicalExpression',
  MemberExpression = 'MemberExpression',
  NewExpression = 'NewExpression',
  UnaryExpression = 'UnaryExpression',
}

export enum Scope {
  Global = 'global',
  Inner = 'inner',
  Instance = 'instance',
  Static = 'static',
}


export function explainSync(options: JsDocOptions): CommentEntry[];
